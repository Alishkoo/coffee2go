//
//  WebSocketManager.swift
//  FourElements
//
//  Created by Alibek Baisholanov on 08.04.2025.
//

import Foundation

class WebSocketManager {
    private var webSocketTask: URLSessionWebSocketTask?
    private let urlSession: URLSession
    private let serverURL: URL
    private let playerID: String
    
    // –ó–∞–º—ã–∫–∞–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    var onConnect: (() -> Void)?
    var onDisconnect: ((Error?) -> Void)?
    var onMessageReceived: ((WebSocketMessage) -> Void)?
    
    // –õ–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private let maxRetryAttempts = 10
    private var currentRetryAttempts = 0
    private var shouldReconnect = true // –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    
    init(playerID: String) {
        self.playerID = playerID
        let serverAddress = "wss://duo-elements-backend.onrender.com" // –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
        self.serverURL = URL(string: "\(serverAddress)/ws?playerID=\(playerID)")!
        self.urlSession = URLSession(configuration: .default)
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    func connect() {
        guard shouldReconnect else {
            print("‚ùå Reconnection disabled. Aborting connection attempt.")
            return
        }
        
        guard currentRetryAttempts < maxRetryAttempts else {
            print("‚ùå Maximum retry attempts reached. Connection aborted.")
            shouldReconnect = false // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            return
        }
        
        currentRetryAttempts += 1
        print("üîÑ Attempting to connect (\(currentRetryAttempts)/\(maxRetryAttempts))...")
        
        webSocketTask = urlSession.webSocketTask(with: serverURL)
        webSocketTask?.resume()
        
        listenForMessages()
        onConnect?()
        print("‚úÖ WebSocket connected to \(serverURL)")
    }
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    func disconnect() {
        shouldReconnect = false
        webSocketTask?.cancel(with: .goingAway, reason: nil)
        onDisconnect?(nil)
        print("‚ùå WebSocket disconnected")
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    func sendMessage<T: Codable>(_ message: T) {
        guard let jsonData = try? JSONEncoder().encode(message),
              let jsonString = String(data: jsonData, encoding: .utf8) else {
            print("‚ùå Failed to encode message")
            return
        }
        
        let webSocketMessage = URLSessionWebSocketTask.Message.string(jsonString)
        webSocketTask?.send(webSocketMessage) { error in
            if let error = error {
                print("‚ùå Error sending message: \(error.localizedDescription)")
            } else {
                print("üì§ Message sent: \(jsonString)")
            }
        }
    }
    
    // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    private func listenForMessages() {
        // –ï—Å–ª–∏ WebSocketTask —Ä–∞–≤–µ–Ω nil –∏–ª–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        guard let task = webSocketTask, shouldReconnect else {
            return
        }
        
        task.receive { [weak self] result in
            guard let self = self else { return }
            
            switch result {
            case .failure(let error):
                print("‚ùå Error receiving message: \(error.localizedDescription)")
                self.handleConnectionError(error)
            case .success(let message):
                switch message {
                case .string(let text):
                    self.handleIncomingMessage(text)
                case .data(let data):
                    print("üì• Binary data received: \(data)")
                @unknown default:
                    print("‚ùå Unknown message type received")
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
                if self.shouldReconnect {
                    self.listenForMessages()
                }
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private func handleConnectionError(_ error: Error) {
        print("‚ùå Connection error: \(error.localizedDescription)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —É—Å–ª–æ–≤–∏—è: shouldReconnect –∏ maxRetryAttempts
        if shouldReconnect && currentRetryAttempts < maxRetryAttempts {
            DispatchQueue.global().asyncAfter(deadline: .now() + 2) { [weak self] in
                self?.connect()
            }
        } else {
            shouldReconnect = false
            print("‚ùå Maximum retry attempts reached or reconnection disabled. Connection aborted.")
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É WebSocket, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏
            webSocketTask?.cancel(with: .goingAway, reason: nil)
            
            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            onDisconnect?(error)
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    private func handleIncomingMessage(_ text: String) {
        guard let jsonData = text.data(using: .utf8),
              let message = try? JSONDecoder().decode(WebSocketMessage.self, from: jsonData) else {
            print("‚ùå Failed to decode incoming message")
            return
        }
        
        print("üì• Message received: \(message)")
        onMessageReceived?(message)
    }
}
